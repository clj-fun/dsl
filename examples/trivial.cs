// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local
namespace Trivial
{
    #region Generated by Lokad Code DSL
    [DataContract(Namespace = "trivial.msg")]
    public partial class AddUser : IAccountCommand
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public string UserName { get; private set; }
        [DataMember(Order = 3)] public string[] Roles { get; private set; }
        
        AddUser ()
        {
            Roles = new string[0];
        }
        
        public AddUser (TenantId tenantId, string userName, string[] roles)
        {
            if (!(   ( tenantId != null ) && ( tenantId.Value > 0 )   ))
                 throw new ArgumentException( "tenantId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userName != null ) && ( ( userName.Length < 24 ) && ( userName.Length > 3 ) )   ))
                 throw new ArgumentException( "userName", "Violated schema '(and NotNull (.Length (and (< 24) (> 3))))'" );
            if (!(   ( roles != null ) && ( roles.Length < 16 )   ))
                 throw new ArgumentException( "roles", "Violated schema '(and NotNull (.Length (< 16)))'" );
            TenantId = tenantId;
            UserName = userName;
            Roles = roles;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UserAdded : IAccountEvent
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string UserName { get; private set; }
        [DataMember(Order = 4)] public string[] Roles { get; private set; }
        [DataMember(Order = 5)] public RefInfo RefInfo { get; private set; }
        
        UserAdded ()
        {
            Roles = new string[0];
        }
        
        public UserAdded (TenantId tenantId, UserId userId, string userName, string[] roles, RefInfo refInfo)
        {
            if (!(   ( tenantId != null ) && ( tenantId.Value > 0 )   ))
                 throw new ArgumentException( "tenantId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userId != null ) && ( userId.Value > 0 )   ))
                 throw new ArgumentException( "userId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userName != null ) && ( ( userName.Length < 24 ) && ( userName.Length > 3 ) )   ))
                 throw new ArgumentException( "userName", "Violated schema '(and NotNull (.Length (and (< 24) (> 3))))'" );
            if (!(   ( roles != null ) && ( roles.Length < 16 )   ))
                 throw new ArgumentException( "roles", "Violated schema '(and NotNull (.Length (< 16)))'" );
            if (!(   ( refInfo != null ) && ( ( refInfo.TenantId != null ) && ( refInfo.TenantId.Value > 0 ) ) && ( refInfo.SentUtc > DateTime.MinValue )   ))
                 throw new ArgumentException( "refInfo", "Violated schema '(and NotNull (.TenantId (and NotNull (.Value (> 0)))) (.SentUtc (> DateTime.MinValue)))'" );
            TenantId = tenantId;
            UserId = userId;
            UserName = userName;
            Roles = roles;
            RefInfo = refInfo;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UpdateUserRoles : IAccountCommand
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string[] Roles { get; private set; }
        
        UpdateUserRoles ()
        {
            Roles = new string[0];
        }
        
        public UpdateUserRoles (TenantId tenantId, UserId userId, string[] roles)
        {
            if (!(   ( tenantId != null ) && ( tenantId.Value > 0 )   ))
                 throw new ArgumentException( "tenantId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userId != null ) && ( userId.Value > 0 )   ))
                 throw new ArgumentException( "userId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( roles != null ) && ( roles.Length < 16 )   ))
                 throw new ArgumentException( "roles", "Violated schema '(and NotNull (.Length (< 16)))'" );
            TenantId = tenantId;
            UserId = userId;
            Roles = roles;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UserRolesUpdated : IAccountEvent
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string UserName { get; private set; }
        [DataMember(Order = 4)] public string[] Roles { get; private set; }
        [DataMember(Order = 5)] public DateTime DateUtc { get; private set; }
        
        UserRolesUpdated ()
        {
            Roles = new string[0];
        }
        
        public UserRolesUpdated (TenantId tenantId, UserId userId, string userName, string[] roles, DateTime dateUtc)
        {
            if (!(   ( tenantId != null ) && ( tenantId.Value > 0 )   ))
                 throw new ArgumentException( "tenantId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userId != null ) && ( userId.Value > 0 )   ))
                 throw new ArgumentException( "userId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userName != null ) && ( ( userName.Length < 24 ) && ( userName.Length > 3 ) )   ))
                 throw new ArgumentException( "userName", "Violated schema '(and NotNull (.Length (and (< 24) (> 3))))'" );
            if (!(   ( roles != null ) && ( roles.Length < 16 )   ))
                 throw new ArgumentException( "roles", "Violated schema '(and NotNull (.Length (< 16)))'" );
            if (!(   dateUtc > DateTime.MinValue   ))
                 throw new ArgumentException( "dateUtc", "Violated schema '(> DateTime.MinValue)'" );
            TenantId = tenantId;
            UserId = userId;
            UserName = userName;
            Roles = roles;
            DateUtc = dateUtc;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class DeleteUser : IAccountCommand
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        
        DeleteUser () {}
        
        public DeleteUser (TenantId tenantId, UserId userId)
        {
            if (!(   ( tenantId != null ) && ( tenantId.Value > 0 )   ))
                 throw new ArgumentException( "tenantId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userId != null ) && ( userId.Value > 0 )   ))
                 throw new ArgumentException( "userId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            TenantId = tenantId;
            UserId = userId;
        }
    }
    [DataContract(Namespace = "trivial.msg")]
    public partial class UserDeleted : IAccountEvent
    {
        [DataMember(Order = 1)] public TenantId TenantId { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public string UserName { get; private set; }
        [DataMember(Order = 4)] public string[] Roles { get; private set; }
        [DataMember(Order = 5)] public DateTime DateUtc { get; private set; }
        
        UserDeleted ()
        {
            Roles = new string[0];
        }
        
        public UserDeleted (TenantId tenantId, UserId userId, string userName, string[] roles, DateTime dateUtc)
        {
            if (!(   ( tenantId != null ) && ( tenantId.Value > 0 )   ))
                 throw new ArgumentException( "tenantId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userId != null ) && ( userId.Value > 0 )   ))
                 throw new ArgumentException( "userId", "Violated schema '(and NotNull (.Value (> 0)))'" );
            if (!(   ( userName != null ) && ( ( userName.Length < 24 ) && ( userName.Length > 3 ) )   ))
                 throw new ArgumentException( "userName", "Violated schema '(and NotNull (.Length (and (< 24) (> 3))))'" );
            if (!(   ( roles != null ) && ( roles.Length < 16 )   ))
                 throw new ArgumentException( "roles", "Violated schema '(and NotNull (.Length (< 16)))'" );
            if (!(   dateUtc > DateTime.MinValue   ))
                 throw new ArgumentException( "dateUtc", "Violated schema '(> DateTime.MinValue)'" );
            TenantId = tenantId;
            UserId = userId;
            UserName = userName;
            Roles = roles;
            DateUtc = dateUtc;
        }
    }
    
    public interface IAccountApplicationService
    {
        void When(AddUser c);
        void When(UpdateUserRoles c);
        void When(DeleteUser c);
    }
    
    public interface IAccountState
    {
        void When(UserAdded e);
        void When(UserRolesUpdated e);
        void When(UserDeleted e);
    }
    #endregion
}
