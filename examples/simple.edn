;; this is how you define comments
{
 ;; symbols defined in :using will be added as "using xxxxx;" to C#
 :using [
         Abstractions
         System
         System.Collections.Generic
         System.Runtime.Serialization
         ]
 ;; defines .NET namespace for generated code
 :namespace SkuVault.Sample
 ;; name of the file to generate
 :file Simple.cs
 ;; defines namespace attribute for the data contracts
 :extern SkuVault.Sample-ns
 ;; you can define frequently used fields here once and then refer to them
 ;; later. Format is ":name (FieldType FieldName)". You can have as many
 ;; definitions as you want
 :const {
         ;; this will declare a DateTime field
         :time (DateTime DateUtc)
         ;; this is how you declare an array of ints
         ;; arrays will be inizialized to an empty array in private ctor
         :array-of-int ([int] Numbers)
         ;; nullable types work as well
         :nullable-bool (bool? Option)
         }
 ;; aggregates are defined under :aggs
 :aggs [
         {
         ;; providing an aggregate name will generate proper interfaces
         :name Sales
         ;; all commands will inherit from this interface
         :cmd ICommand<SaleId>
         ;; all events will inherit from this interface
         :evt IEvent<SaleId>
         ;; you can define shortcuts specific to this aggregate
         ;; they will override the ones from the file
         :const {
                 :refInfo (RefInfo refInfo)
                 :tenantId (TenantId tenantId)
                 }
         ;; all messages in this aggregate will start with these fields
         :common [:refInfo]
         ;; this is where we declare messages for the aggregate
         :messages [
                    ;; commands are declared like this:
                    ;; (cmd CommandName [field1 field2 ...] "string format {like} SeriLog"]
                    ;; fields are either references to previously defined constants
                    ;; or you could define them in-line as well
                    (cmd CommandUsingReferences [:tenantId :time] "Started on {time}")
                    ;; this is an example of command that has arrays and nullables
                    ;; that are defined inline
                    (cmd CommandWithArrayAndNullable [(int? maybeInt) ([string] array) ])
                    ;; this event has a few fields skipped in the order
                    (evt EventWithSkippedOrders [:tenantId nil nil (string Title)])
                    ]
         }
        {
         ;; aggregate without name is "func" aggregate

         ;; all commands will inherit from this interface
         :cmd IFuncCommand
         ;; all events will inherit from this interface
         :evt IFuncEvent

         :messages [
                    ;; add don't log interface
                    (evt EventStreamStarted [:time] "Started on {time}" {:base IDontLog})
                    (cmd FindAssembly[])
                    ]
         }
        ]
 }
